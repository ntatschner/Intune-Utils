name: Update Powershell Documentation and convert to Docusaurus format

on:
    push:
        branches:
        - main
        paths:
        - 'src/onlinehelp/**'
    
    workflow_dispatch:
env:
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
    group: ${{ github.workflow }}-Help-Update

jobs:
  Docs_Build:
    runs-on: windows-latest
    outputs:
      CabPaths: ${{ steps.generate_cab_paths.outputs.CabPaths }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup PowerShell module cache
      id: cacher
      uses: actions/cache@v3
      with:
          path: "~/.local/share/powershell/Modules"
          key: ${{ runner.os }}-PowershellDocs
    
    - name: Install PowerShell Dependencies - PlatyPS and Docusaurus
      if: steps.cacher.outputs.cache-hit != 'true'
      id: dependencies
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module -Name PlatyPS -Force -Scope CurrentUser -AllowClobber
        Install-Module -Name Alt3.Docusaurus.Powershell -Scope CurrentUser -AllowClobber

    - name: Install required Modules 
      run: |
            $ModuleParentPaths = Get-ChildItem -Path ${{ github.workspace }}\src\modules\ -Directory
            $ModuleParentPaths | % {
            $ModuleName = $_.Name
            Write-Output "Installing any required modules for $ModuleName"
            $RequiredModules = (Import-PowerShellDataFile -Path "$($_.FullName)\$($ModuleName).psd1").RequiredModules
            if ($RequiredModules) {
                foreach ($module in $RequiredModules) {
                    Install-Module -Name $module.ModuleName -RequiredVersion $module.ModuleVersion -Force -ErrorAction Stop
                }
            } else {
                Write-Output "No required modules found."
            }
            }
      
    - name: Create/Update Help Markdown and XML
      if: steps.dependencies.outcome == 'success'
      id: update_existing_help
      run: |
        $WebSiteURL = "https:\\pwsh.dev.tatux.co.uk"
        $ModuleParentPaths = Get-ChildItem -Path ${{ github.workspace }}\src\onlinehelp -Directory
        $SitePath = "${{ github.workspace }}\src\docs_site\powershell_docs"
        $ModuleParentPaths | % {
            $ModulePath = $_.FullName
            $Module = $_.Name
            $ModuleFilesPath = "${{ github.workspace }}\src\modules\$Module"
            $OriginalMDPath = "${{ github.workspace }}\src\onlinehelp\$Module\docs\"
            $OriginalCabPath = "${{ github.workspace }}\src\onlinehelp\$Module\en-GB\"
            $ModuleDocsPath = "${{ github.workspace }}\src\docs_site\powershell_docs\docs\$Module\docs\"
            $ModuleCabPath = "${{ github.workspace }}\src\docs_site\powershell_docs\c\$Module\"
            Write-Output "Working on $Module"
            try {
              foreach ($f in @($OriginalMDPath, $OriginalCabPath, $ModuleDocsPath, $ModuleCabPath)) {
                if (-not (Test-Path -Path $f)) {
                  New-Item -Path $f -ItemType Directory -Force
                }
              }
            } catch {
              Write-Error "Failed to copy markdown files for $Module. Error: $_"
              break
            }
            try {
              Import-Module $ModuleFilesPath -Force -ErrorAction Stop
              Update-MarkdownHelpModule -Path $OriginalMDPath -Force -AlphabeticParamsOrder -RefreshModulePage -UpdateInputOutput -ErrorAction Stop
            } catch {
              Write-Error "Failed to update markdown help for $Module. Error: $_"
              break
            }
            try {
              New-ExternalHelp -Path $OriginalMDPath -OutputPath $OriginalCabPath -Force -ErrorAction Stop 
            } catch {
              Write-Error "Failed to generate external help for $Module. Error: $_"
              break
            }
            Write-Output "Updated help for $Module"
        }
        Write-Output "Updated help for all modules"

    - name: Create and Update Help Cab File
      if: steps.dependencies.outcome == 'success'
      id: create_cab
      run: |
        $ModuleParentPaths = Get-ChildItem -Path ${{ github.workspace }}\src\onlinehelp -Directory
        $ModuleParentPaths | % {
            
            $ModulePath = $_.FullName
            $Module = $_.Name
            Write-Output "Working on $Module"
            $ModuleCabPath = "${{ github.workspace }}\src\docs_site\powershell_docs\c\$Module\"
            $OriginalCabPath = "${{ github.workspace }}\src\onlinehelp\$Module\en-GB\"
            $OriginalMDPath = "${{ github.workspace }}\src\onlinehelp\$Module\docs\"
            try {
              New-ExternalHelpCab -CabFilesFolder $OriginalCabPath -LandingPagePath "$OriginalMDPath$Module.md" -OutputFolder $OriginalCabPath -IncrementHelpVersion -ErrorAction Stop
            } catch {
              Write-Error "Failed to generate external help for $Module. Error: $_"
              break
            }
            Write-Output "Generated external help for $Module"
          }
        Write-Output "Generated external help for all modules"
  
    - name: Generate Help Cab Paths
      id: generate_cab_paths
      run: |
        $ModuleParentPaths = Get-ChildItem -Path ${{ github.workspace }}\src\onlinehelp -Directory
        $CabArray = @()
        $ModuleParentPaths | % {
            $Module = $_.Name
            $CabArray += "\src\onlinehelp\$Module\en-GB\"
        }
        $CabArray = $CabArray -join ","
        Write-Output "CabPaths=$CabArray" >> $env:GITHUB_OUTPUT

    - name: Convert Help Markdown to Docusaurus Format
      if: steps.dependencies.outcome == 'success'
      id: convert_to_docusaurus
      run: |
        $ModuleParentPaths = Get-ChildItem -Path ${{ github.workspace }}\src\modules\ -Directory
        $ModuleParentPaths | % {
            $ModulePath = $_.FullName
            $Module = $_.Name
            $ModuleDocsPath = "${{ github.workspace }}\src\docs_site\powershell_docs\docs\$Module\"
            Write-Output "Working on $Module"
            Import-Module $ModulePath -Force
            try {
              New-DocusaurusHelp -Module $Module -Sidebar "docs" -DocsFolder "$($ModuleDocsPath)" -MetaKeywords @("PowerShell", "Commands", "$Module") -NoPlaceHolderExamples -ErrorAction Stop
            } catch {
              Write-Error "Failed to convert help for $Module. Error: $_"
              break
            }
            Write-Output "Converted help for '$($Module)'"
        }

    - name: Commit and Push Changes
      if: steps.convert_to_docusaurus.outcome == 'success'
      run: |
        git config --global user.email "ntatschner@gmail.com"
        git config --global user.name "Nathan Tatschner"
        git add .
        git commit -m "Update PowerShell Documentation and convert to Docusaurus format - ${{ github.sha }}"
        git push
  
  Updateable_Help_Copy:
    runs-on: ubuntu-latest
    needs: Docs_Build
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup SSH with a passphrase
      env:
        SSH_PASSPHRASE: ${{secrets.POWERSHELL_UPDATE_FILES_PRIVATE_KEY_PASSWORD}}
        SSH_PRIVATE_KEY: ${{secrets.POWERSHELL_UPDATE_FILES_PRIVATE_KEY}}
      run: |
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        echo "echo $SSH_PASSPHRASE" > ~/.ssh_askpass && chmod +x ~/.ssh_askpass
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' | DISPLAY=None SSH_ASKPASS=~/.ssh_askpass ssh-add - >/dev/null
    - name: Scp to host
      run: |
        scp -r -P 9284 src/onlinehelp/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_REMOTE_PATH }}