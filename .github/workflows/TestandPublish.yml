# This is a basic workflow to help you get started with Actions

name: Test and Publish to PSGallery

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  RunTests:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v3
        with:
          path: "~/.local/share/powershell/Modules"
          key: ${{ runner.os }}-PSScriptAnalyzer
      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -ErrorAction Stop
      
      - name: Run Pester Tests
        if: github.event_name == 'pull_request' || 'workflow_dispatch'
        run: |
          Get-ChildItem -Path .\src\modules\ -Directory | ForEach-Object {
            $ModuleName = $_.Name
            Write-Output "Running Pester Tests for $ModuleName"
            Write-Output "Running Pester Tests for Public Functions"
            Invoke-Pester -Path ".\src\modules\$ModuleName\Public\Tests"
            Write-Output "Running Pester Tests for Private Functions"
            Invoke-Pester -Path ".\src\modules\$ModuleName\Private\Tests"
          }

      - name: Lint with PSScriptAnalyzer
        shell: pwsh
        run: |
          Get-ChildItem -Path .\src\modules\ -Directory | ForEach-Object {
            $ModuleName = $_.Name
            Write-Output "Running PSScriptAnalyzer Tests for $ModuleName"
            Write-Output "Running Tests for Public Functions"
            Invoke-ScriptAnalyzer -Path ".\src\modules\$ModuleName\Public\*.ps1 -Outvariable issues
            $errors   += $issues.Where({$_.Severity -eq 'Error'})
            $warnings += $issues.Where({$_.Severity -eq 'Warning'})
            Write-Output "Running Pester Tests for Private Functions"
            Invoke-ScriptAnalyzer -Path ".\src\modules\$ModuleName\Private\*.ps1 -Outvariable issues
            $errors   += $issues.Where({$_.Severity -eq 'Error'})
            $warnings += $issues.Where({$_.Severity -eq 'Warning'})
            if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
            } else {
                Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
            }
          }

