name: Test and Publish to PSGallery

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/modules/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/modules/**'
  workflow_dispatch:

jobs:
  RunTests:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v3
        with:
          path: "~/.local/share/powershell/Modules"
          key: ${{ runner.os }}-PSScriptAnalyzer
      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -ErrorAction Stop
      
      - name: Run Pester Tests
        if: github.event_name == 'pull_request' || 'workflow_dispatch'
        run: |
          Get-ChildItem -Path .\src\modules\ -Directory | ForEach-Object {
            $ModuleName = $_.Name
            Write-Output "Running Pester Tests for $ModuleName"
            Write-Output "Running Pester Tests for Public Functions"
            Invoke-Pester -Path ".\src\modules\$ModuleName\Public\Tests"
            Write-Output "Running Pester Tests for Private Functions"
            Invoke-Pester -Path ".\src\modules\$ModuleName\Private\Tests"
          }

      - name: Lint with PSScriptAnalyzer
        shell: pwsh
        run: |
          Get-ChildItem -Path .\src\modules\ -Directory | ForEach-Object {
            $ModuleName = $_.Name
            Write-Output "Running PSScriptAnalyzer Tests for $ModuleName"
            Write-Output "Running Tests for Public Functions"
            Invoke-ScriptAnalyzer -Path ".\src\modules\$ModuleName\Public\*.ps1" -Outvariable issues
            $errors   += $issues.Where({$_.Severity -eq 'Error'})
            $warnings += $issues.Where({$_.Severity -eq 'Warning'})
            Write-Output "Running Pester Tests for Private Functions"
            Invoke-ScriptAnalyzer -Path ".\src\modules\$ModuleName\Private\*.ps1" -Outvariable issues
            $errors   += $issues.Where({$_.Severity -eq 'Error'})
            $warnings += $issues.Where({$_.Severity -eq 'Warning'})
            if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
            } else {
                Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
            }
          }

      - name: Validate Module Manifest
        shell: pwsh
        run: |
          Get-ChildItem -Path .\src\modules\ -Directory | ForEach-Object {
            $ModuleName = $_.Name
            Write-Output "Validating module manifest for $ModuleName"
            Test-ModuleManifest -Path ".\src\modules\$ModuleName\$ModuleName.psd1" -ErrorAction Stop
          }

  Publish:
    runs-on: windows-latest
    needs: RunTests
    steps:
      - uses: actions/checkout@v4

      - name: Test and Publish modules
        id: version
        run: |
          foreach ($module in (Get-ChildItem -Path .\src\modules\ -Directory)) {
            $ModuleName = $module.Name
            $repoVersion = (Import-PowerShellDataFile -Path .\src\modules\$ModuleName\$ModuleName.psd1).ModuleVersion
            try {
              $publishedVersion = (Find-Module -Name $ModuleName -ErrorAction Stop).Version
            } catch {
              Write-Output "Module $ModuleName not found in PSGallery, creating new module version $repoVersion"
            }
            if ($repoVersion -gt $publishedVersion -or $publishedVersion -eq $null) {
              Write-Output "Publishing module $ModuleName version $repoVersion"
              try {
                Publish-PSResource -Path .\src\modules\$ModuleName -Repository PSGallery -ApiKey ${{ secrets.API_KEY }} -ErrorAction Stop
              } catch {
                Write-Error "Failed to publish module $ModuleName. Error: $_"
              }
            } else {
              Write-Output "Published version ($publishedVersion) matches repo version ($repoVersion)"
            }
          }


